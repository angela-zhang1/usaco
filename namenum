/*
ID: angela.11
TASK: namenum
LANG: C++
*/

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <array> 
//so many headers!

std::ifstream nameIn("namenum.in");
std::ifstream dictionary("dict.txt");

int main() {
	std::vector<std::string> possibleNames;
	std::vector<std::string> cowNames;
	std::string cowNum;
	
	std::map<char, std::array<char, 3>> letterReference{
		{'2', {'A','B','C'}},
		{'3', {'D','E','F'}},
		{'4', {'G','H','I'}},
		{'5', {'J','K','L'}},
		{'6', {'M','N','O'}},
		{'7', {'P','R','S'}},
		{'8', {'T','U','V'}},
		{'9', {'W','X','Y'}},
	};

	nameIn >> cowNum;
	nameIn.close();

	bool trueName = true;
	std::string name;
	int matchCount=0;

	while (!dictionary.eof()) {
		dictionary >> name;
		if (name.length() == cowNum.length())
			possibleNames.push_back(name);
	}
	
	dictionary.close();

	std::ofstream nameOut("namenum.out");

	for (std::string aname : possibleNames) {
		for (unsigned int j = 0; j < cowNum.length(); j++) {
			char nameLetter = aname[j];
			char cowNumDigit = cowNum[j];
			if ((nameLetter != letterReference[cowNumDigit][0]) && (nameLetter != letterReference[cowNumDigit][1]) && (nameLetter != letterReference[cowNumDigit][2])) {
				trueName = false;
				break;
			}
		}
		if (trueName) {
			cowNames.push_back(aname);
			matchCount++;
			nameOut << aname;
		}
	}

	nameOut << cowNames.size();

	//for (unsigned int i = 0; i < cowNames.size(); i++) {
	//	nameOut << cowNames[i];
	//}

	if (matchCount == 0) {
		nameOut << "NONE";
	}

	nameOut << "\n";
	nameOut.close();
	return 0;
}

